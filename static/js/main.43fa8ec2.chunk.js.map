{"version":3,"sources":["hooks/useStore.js","components/common/User.js","components/dashboard/Task.js","components/dashboard/Column.js","components/dashboard/NewTaskDialog.js","components/dashboard/index.js","components/header/index.js","App.js","api/index.js","store/users.js","store/board.js","store/index.js","index.js"],"names":["useStore","useContext","StoreContext","User","user","Box","display","alignItems","Avatar","src","avatar","alt","name","style","padding","Task","task","CardContent","Typography","color","gutterBottom","fontSize","title","description","assignee","Column","observer","section","tasks","map","index","draggableId","id","provided","Card","ref","innerRef","draggableProps","dragHandleProps","draggableStyle","marginBottom","NewTaskDialog","activeSection","open","handleClose","useState","formState","setFormState","users","boards","updateFormState","useCallback","event","target","value","prevState","trim","addNewTask","preventDefault","active","addTask","Dialog","onClose","DialogTitle","onSubmit","DialogContent","minWidth","p","TextField","fullWidth","required","type","label","onChange","FormControl","FormLabel","Select","native","disabled","list","DialogActions","Button","onClick","Dashboard","newTaskToSection","setNewTaskToSection","closeDialog","onDragEnd","source","destination","taskId","moveTask","Grid","container","spacing","sections","item","xs","Paper","justifyContent","variant","droppableId","snapshot","droppableProps","isDraggingOver","backgroundColor","minHeight","placeholder","Header","AppBar","position","Toolbar","marginLeft","selectBoard","b","me","domain","this","url","data","config","a","fetch","body","JSON","stringify","headers","request","json","path","searchParams","perform","qs","payload","method","types","model","identifier","createdAt","string","ActiveUser","named","UsersStore","maybe","array","views","self","length","actions","load","flow","apiCall","get","afterCreate","safeReference","BoardSection","getParent","boardID","status","onSnapshot","save","put","Board","fromSection","find","toSection","taskToMoveIndex","findIndex","splice","toJSON","sectionId","push","uuidv4","BoardStore","optional","RootStore","store","create","createContext","ReactDOM","render","StrictMode","Provider","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.43fa8ec2.chunk.js","sourcesContent":["import {useContext} from \"react\";\r\nimport {StoreContext} from \"../index\";\r\n\r\nexport const useStore = () => {\r\n    return useContext(StoreContext)\r\n}","import Avatar from \"@material-ui/core/Avatar\";\r\nimport Box from \"@material-ui/core/Box\";\r\n\r\nexport const User = ({user}) => {\r\n    return (\r\n        <Box display='flex' alignItems='center'>\r\n            <Avatar src={user?.avatar} alt={user?.name}/>\r\n            <span style={{padding: 5}}>\r\n                {user?.name}\r\n            </span>\r\n        </Box>\r\n    )\r\n}","import CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {User} from \"../common/User\";\r\n\r\n\r\nexport const Task = ({task}) => {\r\n    return (\r\n        <CardContent>\r\n            <Typography color='textPrimary' gutterBottom style={{fontSize: 18}}>\r\n                {task?.title}\r\n            </Typography>\r\n            <Typography color='textSecondary' gutterBottom>\r\n                {task?.description}\r\n            </Typography>\r\n            <User user={task.assignee}/>\r\n        </CardContent>\r\n    )\r\n}","import {observer} from \"mobx-react-lite\";\r\nimport {Draggable} from \"react-beautiful-dnd\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport {Task} from \"./Task\";\r\n\r\nconst getItemStyle = (draggableStyle) => {\r\n    return {\r\n        padding: 8,\r\n        marginBottom: 8,\r\n        ...draggableStyle\r\n    }\r\n}\r\n\r\nexport const Column = observer(({section}) => {\r\n    return (\r\n        <div>\r\n            {section?.tasks?.map((task, index) => {\r\n                return (\r\n                    <Draggable draggableId={task.id} key={task.id} index={index}>\r\n                        {(provided) => (\r\n                            <Card\r\n                                ref={provided.innerRef}\r\n                                {...provided.draggableProps}\r\n                                {...provided.dragHandleProps}\r\n                                style={getItemStyle(provided.draggableProps.style)}\r\n                            >\r\n                                <Task task={task}/>\r\n                            </Card>\r\n                        )}\r\n                    </Draggable>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n})","import {useCallback, useState} from \"react\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {useStore} from \"../../hooks/useStore\";\r\n\r\n\r\nexport const NewTaskDialog = observer(({activeSection, open, handleClose}) => {\r\n    const [formState, setFormState] = useState({})\r\n\r\n    const {users, boards} = useStore()\r\n\r\n    const updateFormState = useCallback((event) => {\r\n        const {name, value} = event.target\r\n\r\n        setFormState(prevState => ({\r\n            ...prevState,\r\n            [name]: value ? value.trim() : ''\r\n        }))\r\n    }, [setFormState])\r\n\r\n    const addNewTask = useCallback((event) => {\r\n        event.preventDefault()\r\n\r\n        boards.active.addTask(activeSection, formState)\r\n        handleClose()\r\n        setFormState({})\r\n    }, [formState, boards, activeSection, handleClose])\r\n\r\n    return (\r\n        <Dialog open={open} onClose={handleClose}>\r\n            <DialogTitle>\r\n                Creating A New Task:\r\n            </DialogTitle>\r\n            <form onSubmit={addNewTask}>\r\n                <DialogContent style={{minWidth: 500}}>\r\n                    <Box p={1}>\r\n                        <TextField\r\n                            fullWidth\r\n                            required\r\n                            type='text'\r\n                            name='title'\r\n                            label='Title'\r\n                            onChange={updateFormState}\r\n                            value={formState?.title || ''}\r\n                        />\r\n                    </Box>\r\n                    <Box p={1}>\r\n                        <TextField\r\n                            fullWidth\r\n                            required\r\n                            type='description'\r\n                            name='description'\r\n                            label='Description'\r\n                            onChange={updateFormState}\r\n                            value={formState?.description || ''}\r\n                        />\r\n                    </Box>\r\n                    <Box p={1}>\r\n                        <FormControl fullWidth>\r\n                            <FormLabel>\r\n                                Assignee\r\n                            </FormLabel>\r\n                            <Select\r\n                                native\r\n                                name='assignee'\r\n                                value={formState?.assignee || ''}\r\n                                onChange={updateFormState}>\r\n                                <option value='' disabled>\r\n                                    -\r\n                                </option>\r\n                                {users.list.map(user => {\r\n                                        return (\r\n                                            <option key={user.id} value={user.id}>{user?.name}</option>\r\n                                        )\r\n                                    }\r\n                                )}\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Box>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} color='secondary'>\r\n                        Close\r\n                    </Button>\r\n                    <Button type='submit' color='primary'>\r\n                        Create\r\n                    </Button>\r\n                </DialogActions>\r\n            </form>\r\n        </Dialog>\r\n    )\r\n})","import {useCallback, useState} from \"react\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {DragDropContext, Droppable} from \"react-beautiful-dnd\";\r\nimport {useStore} from \"../../hooks/useStore\";\r\nimport {Column} from \"./Column\";\r\nimport {NewTaskDialog} from \"./NewTaskDialog\";\r\n\r\nconst getListStyle = (isDraggingOver) => {\r\n    return {\r\n        backgroundColor: isDraggingOver ? 'lightblue' : 'lightgray',\r\n        padding: 8,\r\n        minHeight: 500,\r\n    }\r\n}\r\n\r\nexport const Dashboard = observer(() => {\r\n    const {boards} = useStore()\r\n    const [newTaskToSection, setNewTaskToSection] = useState(null)\r\n\r\n    const closeDialog = useCallback(() => {\r\n        setNewTaskToSection(null)\r\n    }, [setNewTaskToSection])\r\n\r\n    const onDragEnd = useCallback((event) => {\r\n        const {source, destination, draggableId: taskId} = event\r\n\r\n        boards.active.moveTask(taskId, source, destination)\r\n    }, [boards])\r\n\r\n    return (\r\n        <Box p={2}>\r\n            <DragDropContext onDragEnd={onDragEnd}>\r\n                <Grid container spacing={3}>\r\n                    {boards.active?.sections?.map(section => {\r\n                        return (\r\n                            <Grid item key={section.id} xs>\r\n                                <Paper>\r\n                                    <Box p={2} display='flex' alignItems='center' justifyContent='space-between'>\r\n                                        <Typography variant='h5'>\r\n                                            {section?.title}\r\n                                        </Typography>\r\n                                        <Button variant='outlined' color='primary' onClick={() => {\r\n                                            setNewTaskToSection(section.id)\r\n                                        }}>Add</Button>\r\n                                    </Box>\r\n                                    <Droppable droppableId={section.id}>\r\n                                        {(provided, snapshot) => (\r\n                                            <div\r\n                                                {...provided.droppableProps}\r\n                                                ref={provided.innerRef}\r\n                                                style={getListStyle(snapshot.isDraggingOver)}\r\n                                            >\r\n                                                <Column section={section}/>\r\n                                                {provided.placeholder}\r\n                                            </div>\r\n                                        )}\r\n                                    </Droppable>\r\n                                </Paper>\r\n                            </Grid>\r\n                        )\r\n                    })}\r\n                </Grid>\r\n            </DragDropContext>\r\n            <NewTaskDialog\r\n                open={!!newTaskToSection}\r\n                handleClose={closeDialog}\r\n                activeSection={newTaskToSection}\r\n            />\r\n        </Box>\r\n    )\r\n})\r\n","import {observer} from \"mobx-react-lite\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {useStore} from \"../../hooks/useStore\";\r\nimport {User} from \"../common/User\";\r\n\r\nexport const Header = observer(() => {\r\n    const {boards, users} = useStore()\r\n\r\n    return (\r\n        <AppBar position='static'>\r\n            <Toolbar variant='dense'>\r\n                <Grid container justifyContent='space-between' alignItems='center'>\r\n                    <Grid item>\r\n                        <Box display='flex' alignItems='center'>\r\n                            <Typography variant='h6'>\r\n                                Dashboard:\r\n                            </Typography>\r\n                            <FormControl variant='outlined'>\r\n                                <Select\r\n                                    style={{backgroundColor: '#ffffff', marginLeft: 10}}\r\n                                    native\r\n                                    value={boards?.active?.id || ''}\r\n                                    onChange={event => {\r\n                                        const {value} = event.target\r\n\r\n                                        boards.selectBoard(value)\r\n                                    }}>\r\n                                    <option value='' disabled>\r\n                                        -\r\n                                    </option>\r\n                                    {boards.list.map(b => {\r\n                                            return (\r\n                                                <option key={b.id} value={b?.id}>{b?.title}</option>\r\n                                            )\r\n                                        }\r\n                                    )}\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Box>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <User user={users?.me}/>\r\n                    </Grid>\r\n                </Grid>\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n})","import {observer} from \"mobx-react-lite\";\nimport {Dashboard} from \"./components/dashboard\";\nimport {Header} from \"./components/header\";\n\nfunction App() {\n\n    return (\n        <>\n            <Header/>\n            <main>\n                <Dashboard/>\n            </main>\n        </>\n    );\n}\n\nexport default observer(App);\n","import qs from 'query-string'\r\n\r\nexport const DOMAIN = 'http://localhost:3001'\r\n\r\nclass ApiCall {\r\n    constructor(domain) {\r\n        this.domain = domain\r\n    }\r\n\r\n    async perform(url, data, config) {\r\n        const request = await fetch(`${this.domain}/${url}`, {\r\n            ...config,\r\n            body: JSON.stringify(data),\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            }\r\n        })\r\n        return await request.json()\r\n    }\r\n\r\n    async get(path, searchParams) {\r\n        return await this.perform(`${path}?${qs.stringify(searchParams)}`)\r\n    }\r\n\r\n    async post(path, payload) {\r\n        return await this.perform(path, payload, {\r\n            method: 'POST'\r\n        })\r\n    }\r\n\r\n    async put(path, payload) {\r\n        return await this.perform(path, payload, {\r\n            method: 'PUT'\r\n        })\r\n    }\r\n\r\n    async delete(path) {\r\n        return await this.perform(path, {\r\n            method: 'DELETE'\r\n        })\r\n    }\r\n}\r\n\r\nexport default new ApiCall(DOMAIN)","import {flow, types} from 'mobx-state-tree'\r\nimport apiCall from '../api'\r\n\r\n\r\nexport const User = types.model('User', {\r\n    id: types.identifier,\r\n    createdAt: types.string,\r\n    name: types.string,\r\n    avatar: types.string,\r\n})\r\n\r\nconst ActiveUser = User.named('ActiveUser')\r\n\r\nexport const UsersStore = types.model('UsersStore', {\r\n    users: types.maybe(types.array(User)),\r\n    me: types.maybe(ActiveUser)\r\n}).views(self => ({\r\n    get list() {\r\n        if (self.users && self.users.length > 0) {\r\n            return self.users.map(({id, name}) => ({id, name}))\r\n        }\r\n        return []\r\n    },\r\n})).actions(self => ({\r\n    load: flow(function* () {\r\n        self.users = yield apiCall.get('users')\r\n        self.me = yield apiCall.get('me')\r\n    }),\r\n    afterCreate() {\r\n        self.load()\r\n    },\r\n}))","import {flow, getParent, onSnapshot, types} from 'mobx-state-tree'\r\nimport apiCall from '../api'\r\nimport {User} from \"./users\";\r\nimport {v4 as uuidv4} from \"uuid\";\r\n\r\nconst Task = types.model('Task', {\r\n    id: types.identifier,\r\n    title: types.string,\r\n    description: types.string,\r\n    assignee: types.safeReference(User),\r\n})\r\n\r\nconst BoardSection = types.model('BoardSection', {\r\n    id: types.identifier,\r\n    title: types.string,\r\n    tasks: types.array(Task)\r\n}).actions(self => ({\r\n    load: flow(function* () {\r\n        const {id: boardID} = getParent(self, 2)\r\n        const {id: status} = self\r\n\r\n        const {tasks} = yield apiCall.get(`boards/${boardID}/tasks/${status}`)\r\n        self.tasks = tasks\r\n\r\n        onSnapshot(self, self.save)\r\n    }),\r\n    save: flow(function* ({tasks}) {\r\n        const {id: boardID} = getParent(self, 2)\r\n        const {id: status} = self\r\n\r\n        yield apiCall.put(`boards/${boardID}/tasks/${status}`, {tasks})\r\n    }),\r\n    afterCreate() {\r\n        self.load()\r\n    },\r\n}))\r\n\r\nconst Board = types.model('Board', {\r\n    id: types.identifier,\r\n    title: types.string,\r\n    sections: types.array(BoardSection)\r\n}).actions(self => ({\r\n    moveTask(id, source, destination) {\r\n        const fromSection = self.sections.find(section => section.id === source.droppableId)\r\n        const toSection = self.sections.find(section => section.id === destination.droppableId)\r\n\r\n        const taskToMoveIndex = fromSection.tasks.findIndex(task => task.id === id)\r\n        const [task] = fromSection.tasks.splice(taskToMoveIndex, 1)\r\n\r\n        toSection.tasks.splice(destination.index, 0, task.toJSON())\r\n    },\r\n    addTask(sectionId, payload) {\r\n        const section = self.sections.find(section => section.id === sectionId)\r\n\r\n        section.tasks.push({\r\n            id: uuidv4(),\r\n            ...payload,\r\n        })\r\n    },\r\n}))\r\n\r\nexport const BoardStore = types.model('BoardStore', {\r\n    boards: types.optional(types.array(Board), []),\r\n    active: types.safeReference(Board),\r\n}).views(self => ({\r\n    get list() {\r\n        return self.boards.map(({id, title}) => ({id, title}))\r\n    }\r\n})).actions(self => ({\r\n        selectBoard(id) {\r\n            self.active = id\r\n        },\r\n        load: flow(function* () {\r\n            self.boards = yield apiCall.get('boards')\r\n            self.active = 'MAIN'\r\n        }),\r\n        afterCreate() {\r\n            self.load()\r\n        },\r\n}))","import {types} from 'mobx-state-tree'\r\nimport {UsersStore} from \"./users\";\r\nimport {BoardStore} from \"./board\";\r\n\r\nexport const RootStore = types.model('RootStore', {\r\n    users: types.optional(UsersStore, {}),\r\n    boards: types.optional(BoardStore, {}),\r\n})","import React, {createContext} from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {RootStore} from \"./store\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\n\nconst store = RootStore.create({})\n\nexport const StoreContext = createContext(store)\n\nReactDOM.render(\n    <React.StrictMode>\n        <StoreContext.Provider value={store}>\n            <CssBaseline />\n            <App/>\n        </StoreContext.Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}